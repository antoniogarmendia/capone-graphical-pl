/*
 * generated by Xtext 2.25.0
 */
package capone.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;

import com.google.common.base.Predicate;

import capone.CaponePackage;
import capone.Module;
import capone.Rule;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class CaponeDslScopeProvider extends AbstractCaponeDslScopeProvider {

	@Override
	public IScope getScope (EObject context, EReference reference) {
		
		// scope for rule extensions
		if (context instanceof Rule && reference == CaponePackage.Literals.RULE__EXTENDSRULE) {

			// collect module dependencies recursively, resolving proxies when needed
			Module dependency, module = (Module)EcoreUtil2.getRootContainer(context);
			List<Module> dependencies = module.getAllModuleDependencies();
			for (int i=0; i<dependencies.size(); i++) {
				dependency = dependencies.get(i);
				if (dependency.eResource()!=null) {
					super.getScope(dependency, CaponePackage.Literals.MODULE__MODULE_OPTIONAL);
					dependencies.addAll(dependency.getAllModuleDependencies());
				}
			}

			// return qualified name of rules in the module dependencies
			List<String> qrules  = new ArrayList<String>();
			for (Module dep : dependencies) {
				if (dep.getRules()!=null && dep.getRules().getRules()!=null)
					dep.getRules().getRules().forEach(r -> qrules.add(dep.getName()+"."+r.getName()));
			}
			return new FilteringScope(
					super.getScope(context, reference),
					new Predicate<IEObjectDescription>() {
						@Override
						public boolean apply(IEObjectDescription rule) {
							return qrules.contains(rule.getQualifiedName().toString());
						} 
					});						
		}

		// default scope
		return super.getScope(context, reference);
	}	

//	@Override
//	public IScope getScope (EObject context, EReference reference) {
//		
//		// scope for rule extensions
//		if (context instanceof Rule && reference == CaponePackage.Literals.RULE__EXTENDSRULE) {
//			Module       module  = (Module)EcoreUtil2.getRootContainer(context);
//			List<String> qrules  = new ArrayList<String>();
//			for (Module dependency : module.getAllModuleDependencies())
//				if (dependency.getRules()!=null)
//					dependency.getRules().getRules().forEach(r -> qrules.add(dependency.getName()+"."+r.getName()));					
//			return new FilteringScope(
//					super.getScope(context, reference),
//					new Predicate<IEObjectDescription>() {
//						@Override
//						public boolean apply(IEObjectDescription rule) {
//							return qrules.contains(rule.getQualifiedName().toString());
//						} 
//					}
//					);
//		}
//		
//		// default scope
//		else return super.getScope(context, reference);
//	}
	
}

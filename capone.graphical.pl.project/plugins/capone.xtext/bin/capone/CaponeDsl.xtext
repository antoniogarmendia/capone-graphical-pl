// automatically generated by Xtext
grammar capone.CaponeDsl with org.eclipse.xtext.common.Terminals

import "http://capone/1.0" //"http://capone/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Module returns Module:
//	(imports += FileURI (imports += FileURI)*)?
	(isTop?='top')?
	'Module' name=EString 
	'{'
	(
		('formula' formula=Formula)?	
		('metamodel' metamodel=EString) &
		('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)? &
		('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)? &
		('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)? &
		('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)? &
		('rules' rules=RuleSet)? &
		('diagram' chooseDiagram=Diagram)?		
	)
	'}'
;

//FileURI returns FileURI:
//	{FileURI}
//	'import' importURI = STRING
//;

EBoolean returns ecore::EBoolean: 
	'true' | 'false'
;

EString returns ecore::EString:
	STRING | ID
;

RuleSet returns RuleSet: 
	rulefile=EString '{' (rules+=Rule ( ',' rules+=Rule )*)? '}'
;

Diagram returns Diagram: 
	viewpointFileURI=EString
	('{'
	 	('override' overridesElements+=Element ( "," overridesElements+=Element)*)?  
	 	('merge' merge+=Element ( "," merge+=Element)*)?    
	'}')?	
;

Element returns Element:
	elementId=EString (feature=FeatureElement)?
	('(' overModules+=[Module|EString] ( "," overModules+=[Module|EString])*')')?
;

FeatureElement returns FeatureElement:
	{FeatureElement}
	'.' featureId=EString (feature=FeatureElement)?
	;

Rule returns Rule: 
	name=EString ('extends' extendsrule=[Rule|QualifiedName])?
;

QualifiedName: ID '.' ID;

Formula returns Formula: 
	term=Term
;

Term returns Term: 
	(Simple | Binary) (next=NextTerm)?
;

Simple returns UnaryTerm:
	(uoperator=UnaryOperator)? variable=[Module|EString] 
;

Binary returns BinaryTerm:
	(uoperator=UnaryOperator)? '(' operand1=Simple boperator=BinaryOperator operand2=Term ')' 
;

NextTerm returns NextTerm:
	boperator=BinaryOperator term=Term
;

enum UnaryOperator : not='not';
enum BinaryOperator : and='and' | or='or' | implies='implies';
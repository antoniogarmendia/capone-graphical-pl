/*
 * generated by Xtext 2.32.0
 */
package capone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CaponeDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsTopAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsTopTopKeyword_0_0 = (Keyword)cIsTopAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cGroup_4_0.eContents().get(0);
		private final Keyword cFormulaKeyword_4_0_0_0 = (Keyword)cGroup_4_0_0.eContents().get(0);
		private final Assignment cFormulaAssignment_4_0_0_1 = (Assignment)cGroup_4_0_0.eContents().get(1);
		private final RuleCall cFormulaFormulaParserRuleCall_4_0_0_1_0 = (RuleCall)cFormulaAssignment_4_0_0_1.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cMetamodelKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cMetamodelAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cMetamodelEStringParserRuleCall_4_0_1_1_0 = (RuleCall)cMetamodelAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cExtendsMandatoryKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cModuleMandatoryAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cModuleMandatoryModuleCrossReference_4_1_1_0 = (CrossReference)cModuleMandatoryAssignment_4_1_1.eContents().get(0);
		private final RuleCall cModuleMandatoryModuleEStringParserRuleCall_4_1_1_0_1 = (RuleCall)cModuleMandatoryModuleCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cModuleMandatoryAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final CrossReference cModuleMandatoryModuleCrossReference_4_1_2_1_0 = (CrossReference)cModuleMandatoryAssignment_4_1_2_1.eContents().get(0);
		private final RuleCall cModuleMandatoryModuleEStringParserRuleCall_4_1_2_1_0_1 = (RuleCall)cModuleMandatoryModuleCrossReference_4_1_2_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cExtendsOptionalKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cModuleOptionalAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cModuleOptionalModuleCrossReference_4_2_1_0 = (CrossReference)cModuleOptionalAssignment_4_2_1.eContents().get(0);
		private final RuleCall cModuleOptionalModuleEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cModuleOptionalModuleCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cModuleOptionalAssignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final CrossReference cModuleOptionalModuleCrossReference_4_2_2_1_0 = (CrossReference)cModuleOptionalAssignment_4_2_2_1.eContents().get(0);
		private final RuleCall cModuleOptionalModuleEStringParserRuleCall_4_2_2_1_0_1 = (RuleCall)cModuleOptionalModuleCrossReference_4_2_2_1_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cUnorderedGroup_4.eContents().get(3);
		private final Keyword cExtendsAlternativeKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cModuleAlternativeAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cModuleAlternativeModuleCrossReference_4_3_1_0 = (CrossReference)cModuleAlternativeAssignment_4_3_1.eContents().get(0);
		private final RuleCall cModuleAlternativeModuleEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cModuleAlternativeModuleCrossReference_4_3_1_0.eContents().get(1);
		private final Group cGroup_4_3_2 = (Group)cGroup_4_3.eContents().get(2);
		private final Keyword cCommaKeyword_4_3_2_0 = (Keyword)cGroup_4_3_2.eContents().get(0);
		private final Assignment cModuleAlternativeAssignment_4_3_2_1 = (Assignment)cGroup_4_3_2.eContents().get(1);
		private final CrossReference cModuleAlternativeModuleCrossReference_4_3_2_1_0 = (CrossReference)cModuleAlternativeAssignment_4_3_2_1.eContents().get(0);
		private final RuleCall cModuleAlternativeModuleEStringParserRuleCall_4_3_2_1_0_1 = (RuleCall)cModuleAlternativeModuleCrossReference_4_3_2_1_0.eContents().get(1);
		private final Group cGroup_4_4 = (Group)cUnorderedGroup_4.eContents().get(4);
		private final Keyword cExtendsOrKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cModuleOrAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final CrossReference cModuleOrModuleCrossReference_4_4_1_0 = (CrossReference)cModuleOrAssignment_4_4_1.eContents().get(0);
		private final RuleCall cModuleOrModuleEStringParserRuleCall_4_4_1_0_1 = (RuleCall)cModuleOrModuleCrossReference_4_4_1_0.eContents().get(1);
		private final Group cGroup_4_4_2 = (Group)cGroup_4_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_4_2_0 = (Keyword)cGroup_4_4_2.eContents().get(0);
		private final Assignment cModuleOrAssignment_4_4_2_1 = (Assignment)cGroup_4_4_2.eContents().get(1);
		private final CrossReference cModuleOrModuleCrossReference_4_4_2_1_0 = (CrossReference)cModuleOrAssignment_4_4_2_1.eContents().get(0);
		private final RuleCall cModuleOrModuleEStringParserRuleCall_4_4_2_1_0_1 = (RuleCall)cModuleOrModuleCrossReference_4_4_2_1_0.eContents().get(1);
		private final Group cGroup_4_5 = (Group)cUnorderedGroup_4.eContents().get(5);
		private final Keyword cRulesKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cRulesAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cRulesRuleSetParserRuleCall_4_5_1_0 = (RuleCall)cRulesAssignment_4_5_1.eContents().get(0);
		private final Group cGroup_4_6 = (Group)cUnorderedGroup_4.eContents().get(6);
		private final Keyword cDiagramKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Assignment cChooseDiagramAssignment_4_6_1 = (Assignment)cGroup_4_6.eContents().get(1);
		private final RuleCall cChooseDiagramDiagramParserRuleCall_4_6_1_0 = (RuleCall)cChooseDiagramAssignment_4_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Module returns Module:
		////    (imports += FileURI (imports += FileURI)*)?
		//    (isTop?='top')?
		//    'Module' name=EString
		//    '{'
		//    (
		//        ('formula' formula=Formula)?
		//        ('metamodel' metamodel=EString) &
		//        ('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)? &
		//        ('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)? &
		//        ('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)? &
		//        ('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)? &
		//        ('rules' rules=RuleSet)? &
		//        ('diagram' chooseDiagram=Diagram)?
		//    )
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    (imports += FileURI (imports += FileURI)*)?
		//    (isTop?='top')?
		//    'Module' name=EString
		//    '{'
		//    (
		//        ('formula' formula=Formula)?
		//        ('metamodel' metamodel=EString) &
		//        ('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)? &
		//        ('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)? &
		//        ('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)? &
		//        ('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)? &
		//        ('rules' rules=RuleSet)? &
		//        ('diagram' chooseDiagram=Diagram)?
		//    )
		//    '}'
		public Group getGroup() { return cGroup; }
		
		////    (imports += FileURI (imports += FileURI)*)?
		//    (isTop?='top')?
		public Assignment getIsTopAssignment_0() { return cIsTopAssignment_0; }
		
		//'top'
		public Keyword getIsTopTopKeyword_0_0() { return cIsTopTopKeyword_0_0; }
		
		//'Module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(
		//    ('formula' formula=Formula)?
		//    ('metamodel' metamodel=EString) &
		//    ('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)? &
		//    ('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)? &
		//    ('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)? &
		//    ('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)? &
		//    ('rules' rules=RuleSet)? &
		//    ('diagram' chooseDiagram=Diagram)?
		//)
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//('formula' formula=Formula)?
		//('metamodel' metamodel=EString)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//('formula' formula=Formula)?
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }
		
		//'formula'
		public Keyword getFormulaKeyword_4_0_0_0() { return cFormulaKeyword_4_0_0_0; }
		
		//formula=Formula
		public Assignment getFormulaAssignment_4_0_0_1() { return cFormulaAssignment_4_0_0_1; }
		
		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_4_0_0_1_0() { return cFormulaFormulaParserRuleCall_4_0_0_1_0; }
		
		//('metamodel' metamodel=EString)
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_4_0_1_0() { return cMetamodelKeyword_4_0_1_0; }
		
		//metamodel=EString
		public Assignment getMetamodelAssignment_4_0_1_1() { return cMetamodelAssignment_4_0_1_1; }
		
		//EString
		public RuleCall getMetamodelEStringParserRuleCall_4_0_1_1_0() { return cMetamodelEStringParserRuleCall_4_0_1_1_0; }
		
		//('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'extends.mandatory'
		public Keyword getExtendsMandatoryKeyword_4_1_0() { return cExtendsMandatoryKeyword_4_1_0; }
		
		//moduleMandatory  +=[Module|EString]
		public Assignment getModuleMandatoryAssignment_4_1_1() { return cModuleMandatoryAssignment_4_1_1; }
		
		//[Module|EString]
		public CrossReference getModuleMandatoryModuleCrossReference_4_1_1_0() { return cModuleMandatoryModuleCrossReference_4_1_1_0; }
		
		//EString
		public RuleCall getModuleMandatoryModuleEStringParserRuleCall_4_1_1_0_1() { return cModuleMandatoryModuleEStringParserRuleCall_4_1_1_0_1; }
		
		//( "," moduleMandatory  +=[Module|EString])*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//","
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }
		
		//moduleMandatory  +=[Module|EString]
		public Assignment getModuleMandatoryAssignment_4_1_2_1() { return cModuleMandatoryAssignment_4_1_2_1; }
		
		//[Module|EString]
		public CrossReference getModuleMandatoryModuleCrossReference_4_1_2_1_0() { return cModuleMandatoryModuleCrossReference_4_1_2_1_0; }
		
		//EString
		public RuleCall getModuleMandatoryModuleEStringParserRuleCall_4_1_2_1_0_1() { return cModuleMandatoryModuleEStringParserRuleCall_4_1_2_1_0_1; }
		
		//('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'extends.optional'
		public Keyword getExtendsOptionalKeyword_4_2_0() { return cExtendsOptionalKeyword_4_2_0; }
		
		//moduleOptional   +=[Module|EString]
		public Assignment getModuleOptionalAssignment_4_2_1() { return cModuleOptionalAssignment_4_2_1; }
		
		//[Module|EString]
		public CrossReference getModuleOptionalModuleCrossReference_4_2_1_0() { return cModuleOptionalModuleCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getModuleOptionalModuleEStringParserRuleCall_4_2_1_0_1() { return cModuleOptionalModuleEStringParserRuleCall_4_2_1_0_1; }
		
		//( "," moduleOptional   +=[Module|EString])*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_2_0() { return cCommaKeyword_4_2_2_0; }
		
		//moduleOptional   +=[Module|EString]
		public Assignment getModuleOptionalAssignment_4_2_2_1() { return cModuleOptionalAssignment_4_2_2_1; }
		
		//[Module|EString]
		public CrossReference getModuleOptionalModuleCrossReference_4_2_2_1_0() { return cModuleOptionalModuleCrossReference_4_2_2_1_0; }
		
		//EString
		public RuleCall getModuleOptionalModuleEStringParserRuleCall_4_2_2_1_0_1() { return cModuleOptionalModuleEStringParserRuleCall_4_2_2_1_0_1; }
		
		//('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'extends.alternative'
		public Keyword getExtendsAlternativeKeyword_4_3_0() { return cExtendsAlternativeKeyword_4_3_0; }
		
		//moduleAlternative+=[Module|EString]
		public Assignment getModuleAlternativeAssignment_4_3_1() { return cModuleAlternativeAssignment_4_3_1; }
		
		//[Module|EString]
		public CrossReference getModuleAlternativeModuleCrossReference_4_3_1_0() { return cModuleAlternativeModuleCrossReference_4_3_1_0; }
		
		//EString
		public RuleCall getModuleAlternativeModuleEStringParserRuleCall_4_3_1_0_1() { return cModuleAlternativeModuleEStringParserRuleCall_4_3_1_0_1; }
		
		//( "," moduleAlternative+=[Module|EString])*
		public Group getGroup_4_3_2() { return cGroup_4_3_2; }
		
		//","
		public Keyword getCommaKeyword_4_3_2_0() { return cCommaKeyword_4_3_2_0; }
		
		//moduleAlternative+=[Module|EString]
		public Assignment getModuleAlternativeAssignment_4_3_2_1() { return cModuleAlternativeAssignment_4_3_2_1; }
		
		//[Module|EString]
		public CrossReference getModuleAlternativeModuleCrossReference_4_3_2_1_0() { return cModuleAlternativeModuleCrossReference_4_3_2_1_0; }
		
		//EString
		public RuleCall getModuleAlternativeModuleEStringParserRuleCall_4_3_2_1_0_1() { return cModuleAlternativeModuleEStringParserRuleCall_4_3_2_1_0_1; }
		
		//('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)?
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//'extends.or'
		public Keyword getExtendsOrKeyword_4_4_0() { return cExtendsOrKeyword_4_4_0; }
		
		//moduleOr         +=[Module|EString]
		public Assignment getModuleOrAssignment_4_4_1() { return cModuleOrAssignment_4_4_1; }
		
		//[Module|EString]
		public CrossReference getModuleOrModuleCrossReference_4_4_1_0() { return cModuleOrModuleCrossReference_4_4_1_0; }
		
		//EString
		public RuleCall getModuleOrModuleEStringParserRuleCall_4_4_1_0_1() { return cModuleOrModuleEStringParserRuleCall_4_4_1_0_1; }
		
		//( "," moduleOr         +=[Module|EString])*
		public Group getGroup_4_4_2() { return cGroup_4_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_4_2_0() { return cCommaKeyword_4_4_2_0; }
		
		//moduleOr         +=[Module|EString]
		public Assignment getModuleOrAssignment_4_4_2_1() { return cModuleOrAssignment_4_4_2_1; }
		
		//[Module|EString]
		public CrossReference getModuleOrModuleCrossReference_4_4_2_1_0() { return cModuleOrModuleCrossReference_4_4_2_1_0; }
		
		//EString
		public RuleCall getModuleOrModuleEStringParserRuleCall_4_4_2_1_0_1() { return cModuleOrModuleEStringParserRuleCall_4_4_2_1_0_1; }
		
		//('rules' rules=RuleSet)?
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//'rules'
		public Keyword getRulesKeyword_4_5_0() { return cRulesKeyword_4_5_0; }
		
		//rules=RuleSet
		public Assignment getRulesAssignment_4_5_1() { return cRulesAssignment_4_5_1; }
		
		//RuleSet
		public RuleCall getRulesRuleSetParserRuleCall_4_5_1_0() { return cRulesRuleSetParserRuleCall_4_5_1_0; }
		
		//('diagram' chooseDiagram=Diagram)?
		public Group getGroup_4_6() { return cGroup_4_6; }
		
		//'diagram'
		public Keyword getDiagramKeyword_4_6_0() { return cDiagramKeyword_4_6_0; }
		
		//chooseDiagram=Diagram
		public Assignment getChooseDiagramAssignment_4_6_1() { return cChooseDiagramAssignment_4_6_1; }
		
		//Diagram
		public RuleCall getChooseDiagramDiagramParserRuleCall_4_6_1_0() { return cChooseDiagramDiagramParserRuleCall_4_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////FileURI returns FileURI:
		////    {FileURI}
		////    'import' importURI = STRING
		////;
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRulefileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRulefileEStringParserRuleCall_0_0 = (RuleCall)cRulefileAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_2_0_0 = (RuleCall)cRulesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRulesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_2_1_1_0 = (RuleCall)cRulesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleSet returns RuleSet:
		//    rulefile=EString '{' (rules+=Rule ( ',' rules+=Rule )*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rulefile=EString '{' (rules+=Rule ( ',' rules+=Rule )*)? '}'
		public Group getGroup() { return cGroup; }
		
		//rulefile=EString
		public Assignment getRulefileAssignment_0() { return cRulefileAssignment_0; }
		
		//EString
		public RuleCall getRulefileEStringParserRuleCall_0_0() { return cRulefileEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(rules+=Rule ( ',' rules+=Rule )*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_2_0() { return cRulesAssignment_2_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0_0() { return cRulesRuleParserRuleCall_2_0_0; }
		
		//( ',' rules+=Rule )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_2_1_1() { return cRulesAssignment_2_1_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_1_1_0() { return cRulesRuleParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cViewpointFileURIAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cViewpointFileURIEStringParserRuleCall_0_0 = (RuleCall)cViewpointFileURIAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOverrideKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOverridesElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOverridesElementsElementParserRuleCall_1_1_1_0 = (RuleCall)cOverridesElementsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cOverridesElementsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cOverridesElementsElementParserRuleCall_1_1_2_1_0 = (RuleCall)cOverridesElementsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cMergeKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cMergeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cMergeElementParserRuleCall_1_2_1_0 = (RuleCall)cMergeAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cMergeAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cMergeElementParserRuleCall_1_2_2_1_0 = (RuleCall)cMergeAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Diagram returns Diagram:
		//    viewpointFileURI=EString
		//    ('{'
		//         ('override' overridesElements+=Element ( "," overridesElements+=Element)*)?
		//         ('merge' merge+=Element ( "," merge+=Element)*)?
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//viewpointFileURI=EString
		//('{'
		//     ('override' overridesElements+=Element ( "," overridesElements+=Element)*)?
		//     ('merge' merge+=Element ( "," merge+=Element)*)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//viewpointFileURI=EString
		public Assignment getViewpointFileURIAssignment_0() { return cViewpointFileURIAssignment_0; }
		
		//EString
		public RuleCall getViewpointFileURIEStringParserRuleCall_0_0() { return cViewpointFileURIEStringParserRuleCall_0_0; }
		
		//('{'
		//     ('override' overridesElements+=Element ( "," overridesElements+=Element)*)?
		//     ('merge' merge+=Element ( "," merge+=Element)*)?
		//'}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//('override' overridesElements+=Element ( "," overridesElements+=Element)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'override'
		public Keyword getOverrideKeyword_1_1_0() { return cOverrideKeyword_1_1_0; }
		
		//overridesElements+=Element
		public Assignment getOverridesElementsAssignment_1_1_1() { return cOverridesElementsAssignment_1_1_1; }
		
		//Element
		public RuleCall getOverridesElementsElementParserRuleCall_1_1_1_0() { return cOverridesElementsElementParserRuleCall_1_1_1_0; }
		
		//( "," overridesElements+=Element)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//overridesElements+=Element
		public Assignment getOverridesElementsAssignment_1_1_2_1() { return cOverridesElementsAssignment_1_1_2_1; }
		
		//Element
		public RuleCall getOverridesElementsElementParserRuleCall_1_1_2_1_0() { return cOverridesElementsElementParserRuleCall_1_1_2_1_0; }
		
		//('merge' merge+=Element ( "," merge+=Element)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'merge'
		public Keyword getMergeKeyword_1_2_0() { return cMergeKeyword_1_2_0; }
		
		//merge+=Element
		public Assignment getMergeAssignment_1_2_1() { return cMergeAssignment_1_2_1; }
		
		//Element
		public RuleCall getMergeElementParserRuleCall_1_2_1_0() { return cMergeElementParserRuleCall_1_2_1_0; }
		
		//( "," merge+=Element)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }
		
		//merge+=Element
		public Assignment getMergeAssignment_1_2_2_1() { return cMergeAssignment_1_2_2_1; }
		
		//Element
		public RuleCall getMergeElementParserRuleCall_1_2_2_1_0() { return cMergeElementParserRuleCall_1_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementIdEStringParserRuleCall_0_0 = (RuleCall)cElementIdAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureFeatureElementParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOverModulesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOverModulesModuleCrossReference_2_1_0 = (CrossReference)cOverModulesAssignment_2_1.eContents().get(0);
		private final RuleCall cOverModulesModuleEStringParserRuleCall_2_1_0_1 = (RuleCall)cOverModulesModuleCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cOverModulesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cOverModulesModuleCrossReference_2_2_1_0 = (CrossReference)cOverModulesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cOverModulesModuleEStringParserRuleCall_2_2_1_0_1 = (RuleCall)cOverModulesModuleCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Element returns Element:
		//    elementId=EString (feature=FeatureElement)?
		//    ('(' overModules+=[Module|EString] ( "," overModules+=[Module|EString])*')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elementId=EString (feature=FeatureElement)?
		//('(' overModules+=[Module|EString] ( "," overModules+=[Module|EString])*')')?
		public Group getGroup() { return cGroup; }
		
		//elementId=EString
		public Assignment getElementIdAssignment_0() { return cElementIdAssignment_0; }
		
		//EString
		public RuleCall getElementIdEStringParserRuleCall_0_0() { return cElementIdEStringParserRuleCall_0_0; }
		
		//(feature=FeatureElement)?
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//FeatureElement
		public RuleCall getFeatureFeatureElementParserRuleCall_1_0() { return cFeatureFeatureElementParserRuleCall_1_0; }
		
		//('(' overModules+=[Module|EString] ( "," overModules+=[Module|EString])*')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//overModules+=[Module|EString]
		public Assignment getOverModulesAssignment_2_1() { return cOverModulesAssignment_2_1; }
		
		//[Module|EString]
		public CrossReference getOverModulesModuleCrossReference_2_1_0() { return cOverModulesModuleCrossReference_2_1_0; }
		
		//EString
		public RuleCall getOverModulesModuleEStringParserRuleCall_2_1_0_1() { return cOverModulesModuleEStringParserRuleCall_2_1_0_1; }
		
		//( "," overModules+=[Module|EString])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//overModules+=[Module|EString]
		public Assignment getOverModulesAssignment_2_2_1() { return cOverModulesAssignment_2_2_1; }
		
		//[Module|EString]
		public CrossReference getOverModulesModuleCrossReference_2_2_1_0() { return cOverModulesModuleCrossReference_2_2_1_0; }
		
		//EString
		public RuleCall getOverModulesModuleEStringParserRuleCall_2_2_1_0_1() { return cOverModulesModuleEStringParserRuleCall_2_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class FeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.FeatureElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureIdEStringParserRuleCall_2_0 = (RuleCall)cFeatureIdAssignment_2.eContents().get(0);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureFeatureElementParserRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		
		//FeatureElement returns FeatureElement:
		//    {FeatureElement}
		//    '.' featureId=EString (feature=FeatureElement)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureElement}
		//'.' featureId=EString (feature=FeatureElement)?
		public Group getGroup() { return cGroup; }
		
		//{FeatureElement}
		public Action getFeatureElementAction_0() { return cFeatureElementAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//featureId=EString
		public Assignment getFeatureIdAssignment_2() { return cFeatureIdAssignment_2; }
		
		//EString
		public RuleCall getFeatureIdEStringParserRuleCall_2_0() { return cFeatureIdEStringParserRuleCall_2_0; }
		
		//(feature=FeatureElement)?
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//FeatureElement
		public RuleCall getFeatureFeatureElementParserRuleCall_3_0() { return cFeatureFeatureElementParserRuleCall_3_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExtendsruleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExtendsruleRuleCrossReference_1_1_0 = (CrossReference)cExtendsruleAssignment_1_1.eContents().get(0);
		private final RuleCall cExtendsruleRuleQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cExtendsruleRuleCrossReference_1_1_0.eContents().get(1);
		
		//Rule returns Rule:
		//    name=EString ('extends' extendsrule=[Rule|QualifiedName])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ('extends' extendsrule=[Rule|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//('extends' extendsrule=[Rule|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }
		
		//extendsrule=[Rule|QualifiedName]
		public Assignment getExtendsruleAssignment_1_1() { return cExtendsruleAssignment_1_1; }
		
		//[Rule|QualifiedName]
		public CrossReference getExtendsruleRuleCrossReference_1_1_0() { return cExtendsruleRuleCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getExtendsruleRuleQualifiedNameParserRuleCall_1_1_0_1() { return cExtendsruleRuleQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedName: ID '.' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '.' ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Formula");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//Formula returns Formula:
		//    term=Term
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSimpleParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBinaryParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextNextTermParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//Term returns Term:
		//    (Simple | Binary) (next=NextTerm)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Simple | Binary) (next=NextTerm)?
		public Group getGroup() { return cGroup; }
		
		//(Simple | Binary)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Simple
		public RuleCall getSimpleParserRuleCall_0_0() { return cSimpleParserRuleCall_0_0; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_0_1() { return cBinaryParserRuleCall_0_1; }
		
		//(next=NextTerm)?
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//NextTerm
		public RuleCall getNextNextTermParserRuleCall_1_0() { return cNextNextTermParserRuleCall_1_0; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUoperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUoperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cUoperatorAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableModuleCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableModuleEStringParserRuleCall_1_0_1 = (RuleCall)cVariableModuleCrossReference_1_0.eContents().get(1);
		
		//Simple returns UnaryTerm:
		//    (uoperator=UnaryOperator)? variable=[Module|EString]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(uoperator=UnaryOperator)? variable=[Module|EString]
		public Group getGroup() { return cGroup; }
		
		//(uoperator=UnaryOperator)?
		public Assignment getUoperatorAssignment_0() { return cUoperatorAssignment_0; }
		
		//UnaryOperator
		public RuleCall getUoperatorUnaryOperatorEnumRuleCall_0_0() { return cUoperatorUnaryOperatorEnumRuleCall_0_0; }
		
		//variable=[Module|EString]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Module|EString]
		public CrossReference getVariableModuleCrossReference_1_0() { return cVariableModuleCrossReference_1_0; }
		
		//EString
		public RuleCall getVariableModuleEStringParserRuleCall_1_0_1() { return cVariableModuleEStringParserRuleCall_1_0_1; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUoperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUoperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cUoperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand1SimpleParserRuleCall_2_0 = (RuleCall)cOperand1Assignment_2.eContents().get(0);
		private final Assignment cBoperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoperatorBinaryOperatorEnumRuleCall_3_0 = (RuleCall)cBoperatorAssignment_3.eContents().get(0);
		private final Assignment cOperand2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperand2TermParserRuleCall_4_0 = (RuleCall)cOperand2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Binary returns BinaryTerm:
		//    (uoperator=UnaryOperator)? '(' operand1=Simple boperator=BinaryOperator operand2=Term ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(uoperator=UnaryOperator)? '(' operand1=Simple boperator=BinaryOperator operand2=Term ')'
		public Group getGroup() { return cGroup; }
		
		//(uoperator=UnaryOperator)?
		public Assignment getUoperatorAssignment_0() { return cUoperatorAssignment_0; }
		
		//UnaryOperator
		public RuleCall getUoperatorUnaryOperatorEnumRuleCall_0_0() { return cUoperatorUnaryOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operand1=Simple
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//Simple
		public RuleCall getOperand1SimpleParserRuleCall_2_0() { return cOperand1SimpleParserRuleCall_2_0; }
		
		//boperator=BinaryOperator
		public Assignment getBoperatorAssignment_3() { return cBoperatorAssignment_3; }
		
		//BinaryOperator
		public RuleCall getBoperatorBinaryOperatorEnumRuleCall_3_0() { return cBoperatorBinaryOperatorEnumRuleCall_3_0; }
		
		//operand2=Term
		public Assignment getOperand2Assignment_4() { return cOperand2Assignment_4; }
		
		//Term
		public RuleCall getOperand2TermParserRuleCall_4_0() { return cOperand2TermParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class NextTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.NextTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoperatorBinaryOperatorEnumRuleCall_0_0 = (RuleCall)cBoperatorAssignment_0.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//NextTerm returns NextTerm:
		//    boperator=BinaryOperator term=Term
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//boperator=BinaryOperator term=Term
		public Group getGroup() { return cGroup; }
		
		//boperator=BinaryOperator
		public Assignment getBoperatorAssignment_0() { return cBoperatorAssignment_0; }
		
		//BinaryOperator
		public RuleCall getBoperatorBinaryOperatorEnumRuleCall_0_0() { return cBoperatorBinaryOperatorEnumRuleCall_0_0; }
		
		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}
	
	public class UnaryOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.UnaryOperator");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOperator : not='not';
		public EnumRule getRule() { return rule; }
		
		//not='not'
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }
		
		//'not'
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	public class BinaryOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "capone.CaponeDsl.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cImpliesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cImpliesImpliesKeyword_2_0 = (Keyword)cImpliesEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryOperator : and='and' | or='or' | implies='implies';
		public EnumRule getRule() { return rule; }
		
		//and='and' | or='or' | implies='implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and='and'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or='or'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
		
		//implies='implies'
		public EnumLiteralDeclaration getImpliesEnumLiteralDeclaration_2() { return cImpliesEnumLiteralDeclaration_2; }
		
		//'implies'
		public Keyword getImpliesImpliesKeyword_2_0() { return cImpliesImpliesKeyword_2_0; }
	}
	
	private final ModuleElements pModule;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final RuleSetElements pRuleSet;
	private final DiagramElements pDiagram;
	private final ElementElements pElement;
	private final FeatureElementElements pFeatureElement;
	private final RuleElements pRule;
	private final QualifiedNameElements pQualifiedName;
	private final FormulaElements pFormula;
	private final TermElements pTerm;
	private final SimpleElements pSimple;
	private final BinaryElements pBinary;
	private final NextTermElements pNextTerm;
	private final UnaryOperatorElements eUnaryOperator;
	private final BinaryOperatorElements eBinaryOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CaponeDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pRuleSet = new RuleSetElements();
		this.pDiagram = new DiagramElements();
		this.pElement = new ElementElements();
		this.pFeatureElement = new FeatureElementElements();
		this.pRule = new RuleElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pFormula = new FormulaElements();
		this.pTerm = new TermElements();
		this.pSimple = new SimpleElements();
		this.pBinary = new BinaryElements();
		this.pNextTerm = new NextTermElements();
		this.eUnaryOperator = new UnaryOperatorElements();
		this.eBinaryOperator = new BinaryOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("capone.CaponeDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module returns Module:
	////    (imports += FileURI (imports += FileURI)*)?
	//    (isTop?='top')?
	//    'Module' name=EString
	//    '{'
	//    (
	//        ('formula' formula=Formula)?
	//        ('metamodel' metamodel=EString) &
	//        ('extends.mandatory'   moduleMandatory  +=[Module|EString] ( "," moduleMandatory  +=[Module|EString])*)? &
	//        ('extends.optional'    moduleOptional   +=[Module|EString] ( "," moduleOptional   +=[Module|EString])*)? &
	//        ('extends.alternative' moduleAlternative+=[Module|EString] ( "," moduleAlternative+=[Module|EString])*)? &
	//        ('extends.or'          moduleOr         +=[Module|EString] ( "," moduleOr         +=[Module|EString])*)? &
	//        ('rules' rules=RuleSet)? &
	//        ('diagram' chooseDiagram=Diagram)?
	//    )
	//    '}'
	//;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	////FileURI returns FileURI:
	////    {FileURI}
	////    'import' importURI = STRING
	////;
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false'
	//;
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//RuleSet returns RuleSet:
	//    rulefile=EString '{' (rules+=Rule ( ',' rules+=Rule )*)? '}'
	//;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//Diagram returns Diagram:
	//    viewpointFileURI=EString
	//    ('{'
	//         ('override' overridesElements+=Element ( "," overridesElements+=Element)*)?
	//         ('merge' merge+=Element ( "," merge+=Element)*)?
	//    '}')?
	//;
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	//Element returns Element:
	//    elementId=EString (feature=FeatureElement)?
	//    ('(' overModules+=[Module|EString] ( "," overModules+=[Module|EString])*')')?
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//FeatureElement returns FeatureElement:
	//    {FeatureElement}
	//    '.' featureId=EString (feature=FeatureElement)?
	//    ;
	public FeatureElementElements getFeatureElementAccess() {
		return pFeatureElement;
	}
	
	public ParserRule getFeatureElementRule() {
		return getFeatureElementAccess().getRule();
	}
	
	//Rule returns Rule:
	//    name=EString ('extends' extendsrule=[Rule|QualifiedName])?
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//QualifiedName: ID '.' ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Formula returns Formula:
	//    term=Term
	//;
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//Term returns Term:
	//    (Simple | Binary) (next=NextTerm)?
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Simple returns UnaryTerm:
	//    (uoperator=UnaryOperator)? variable=[Module|EString]
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//Binary returns BinaryTerm:
	//    (uoperator=UnaryOperator)? '(' operand1=Simple boperator=BinaryOperator operand2=Term ')'
	//;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//NextTerm returns NextTerm:
	//    boperator=BinaryOperator term=Term
	//;
	public NextTermElements getNextTermAccess() {
		return pNextTerm;
	}
	
	public ParserRule getNextTermRule() {
		return getNextTermAccess().getRule();
	}
	
	//enum UnaryOperator : not='not';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return eUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//enum BinaryOperator : and='and' | or='or' | implies='implies';
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return eBinaryOperator;
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
